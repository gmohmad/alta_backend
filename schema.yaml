openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/patterns/:
    get:
      operationId: api_patterns_list
      description: List all the patterns or create a new pattern if logged in
      tags:
      - Patterns
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pattern'
          description: ''
    post:
      operationId: api_patterns_create
      description: List all the patterns or create a new pattern if logged in
      tags:
      - Patterns
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pattern'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pattern'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pattern'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pattern'
          description: ''
  /api/patterns/{id}/:
    get:
      operationId: api_patterns_retrieve
      description: Get or delete specified pattern if logged in and if is the owner
        of this pattern
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Patterns
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pattern'
          description: ''
    delete:
      operationId: api_patterns_destroy
      description: Get or delete specified pattern if logged in and if is the owner
        of this pattern
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Patterns
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/patterns/{id}/comments/:
    get:
      operationId: api_patterns_comments_list
      description: List all the comments of a pattern or create a new comment if logged
        in
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: api_patterns_comments_create
      description: List all the comments of a pattern or create a new comment if logged
        in
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/patterns/{id}/comments/{ck}/:
    get:
      operationId: api_patterns_comments_retrieve
      description: Get or update/delete a comment if logged in and if is the owner
        of this comment
      parameters:
      - in: path
        name: ck
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: api_patterns_comments_update
      description: Get or update/delete a comment if logged in and if is the owner
        of this comment
      parameters:
      - in: path
        name: ck
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: api_patterns_comments_partial_update
      description: Get or update/delete a comment if logged in and if is the owner
        of this comment
      parameters:
      - in: path
        name: ck
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: api_patterns_comments_destroy
      description: Get or update/delete a comment if logged in and if is the owner
        of this comment
      parameters:
      - in: path
        name: ck
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Comments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/patterns/{id}/vote-upd-del/:
    put:
      operationId: api_patterns_vote_upd_del_update
      description: Update/delete a vote if logged and if is the owner of this vote
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Votes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vote'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
    patch:
      operationId: api_patterns_vote_upd_del_partial_update
      description: Update/delete a vote if logged and if is the owner of this vote
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Votes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVote'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
    delete:
      operationId: api_patterns_vote_upd_del_destroy
      description: Update/delete a vote if logged and if is the owner of this vote
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Votes
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/patterns/{id}/votes/:
    post:
      operationId: api_patterns_votes_create
      description: Create a vote if logged in and if havent created a vote on this
        pattern already
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Votes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vote'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vote'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: get the profile of a user
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/delete-user/:
    delete:
      operationId: api_users_delete_user_destroy
      description: delete current logged in user
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/users/login/refresh/:
    post:
      operationId: api_users_login_refresh_create
      description: Takes a refresh type JSON web token and returns an access type
        JSON web token if the refresh token is valid.
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: pass in new user data to create a new user instance
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/users/update-profile/:
    put:
      operationId: api_users_update_profile_update
      description: update the profile of current user
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_users_update_profile_partial_update
      description: update the profile of current user
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        body:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - body
      - created_at
      - id
      - updated_at
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    PatchedComment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        body:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        company:
          type: string
          nullable: true
          maxLength: 100
    PatchedVote:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        vote_type:
          $ref: '#/components/schemas/VoteTypeEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
    Pattern:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        prompt:
          type: string
          writeOnly: true
        image_url:
          type: string
          format: uri
          maxLength: 200
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - image_url
      - prompt
      - rating
      - updated_at
    Register:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - id
      - password
      - password2
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        company:
          type: string
          nullable: true
          maxLength: 100
      required:
      - email
      - id
      - username
    Vote:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        vote_type:
          $ref: '#/components/schemas/VoteTypeEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - vote_type
    VoteTypeEnum:
      enum:
      - up
      - down
      type: string
      description: |-
        * `up` - upvote
        * `down` - downvote
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
